TARGET = retro-go-tgbdual

DEBUG = 1
#OPT = -Og -ggdb
OPT = -O0 -ggdb3

BUILD_DIR = build

C_SOURCES =  \
../Core/Src/porting/lib/lz4_depack.c \
../Core/Src/porting/lib/lzma/LzmaDec.c \
../Core/Src/porting/lib/lzma/lzma.c \
odroid_input.c \
odroid_netplay.c \
odroid_overlay.c \
odroid_sdcard.c \
odroid_system.c \
odroid_display.c \
odroid_audio.c \
gw_lcd.c \
loaded_gb_rom.c \
crc32.c \
porting.c \
../retro-go-stm32/components/lupng/miniz.c \

SOURCES_CXX := \
	../external/tgbdual-go/gb_core/tgbdual_apu.cpp \
	../external/tgbdual-go/gb_core/tgbdual_cheat.cpp \
	../external/tgbdual-go/gb_core/tgbdual_cpu.cpp \
	../external/tgbdual-go/gb_core/tgbdual_gb.cpp \
	../external/tgbdual-go/gb_core/tgbdual_lcd.cpp \
	../external/tgbdual-go/gb_core/tgbdual_mbc.cpp \
	../external/tgbdual-go/gb_core/tgbdual_rom.cpp \
	gb-tgbdual/linux_renderer.cpp \
	gb-tgbdual/main.cpp \

PREFIX = 

CC = $(PREFIX)gcc
CXX= $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size

HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

C_DEFS =  \
-DIS_LITTLE_ENDIAN -D__LIBRETRO__ -DTARGET_GNW -DVIDEO_RGB565 -DLINUX_EMU -DCHEAT_CODES=1

C_INCLUDES =  \
-I. \
-I./gb-tgbdual \
-I../Core/Inc/retro-go \
-I../Core/Inc/ \
-I../Core/Src/porting/lib \
-I../Core/Src/porting/lib/lzma \
-I../Core/Inc/porting/gb_tgbdual \
-I../retro-go-stm32/components/odroid \
-I../retro-go-stm32/components/lupng \
-I../external/tgbdual-go \
-I../external/tgbdual-go/gb_core \
-I../external/tgbdual-go/libretro \
-I/opt/homebrew/include/


CXX_INCLUDES =  \
-I. \
-I./gb-tgbdual \
-I../Core/Src/porting/lib \
-I../Core/Src/porting/lib/lzma \
-I../retro-go-stm32/components/odroid \
-I../retro-go-stm32/components/lupng \
-I../external/tgbdual-go \
-I../external/tgbdual-go/gb_core \
-I../external/tgbdual-go/libretro


ASFLAGS = $(AS_DEFS) $(AS_INCLUDES) $(OPT) -fdata-sections -ffunction-sections
CFLAGS  = $(C_DEFS) $(C_INCLUDES) `sdl2-config --cflags` $(OPT) -fdata-sections -ffunction-sections
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)" -Ofast \
	-fno-stack-protector -fno-ident -fomit-frame-pointer \
	-fmerge-all-constants -ffast-math

CXXFLAGS = $(CFLAGS) $(CXX_INCLUDES) \
 	-fno-rtti \
 	-fno-exceptions \
 	-fno-math-errno \
 	-fomit-frame-pointer \
 	-fno-stack-protector \
 	-DRIGHTSHIFT_IS_SAR \
 	-DHAVE_STDINT_H \
 	-DIS_LITTLE_ENDIAN

LIBS = -lm `sdl2-config --libs`
CXXLIBS = -lstdc++
LDFLAGS = $(LIBS) $(CXXLIBS)

all: $(BUILD_DIR)/$(TARGET).elf

OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
CXX_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(SOURCES_CXX:.cpp=.o)))
vpath %.cpp $(sort $(dir $(SOURCES_CXX)))

#$(info $$CXX_OBJECTS is [${CXX_OBJECTS}])

$(BUILD_DIR)/%.o: %.c Makefile.gb-tgbdual | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/%.o: %.cpp | $(BUILD_DIR) 
	$(CXX) -c $(CXXFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) $(CXX_OBJECTS) Makefile.gb-tgbdual
	$(CC) $(OBJECTS) $(CXX_OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR):
	mkdir $@

clean:
	-rm -fR $(BUILD_DIR)

-include $(wildcard $(BUILD_DIR)/*.d)
