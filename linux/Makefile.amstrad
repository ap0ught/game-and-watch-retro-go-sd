TARGET = retro-go-amstrad

DEBUG = 1
#OPT = -Og -ggdb
OPT = -O0 -ggdb3
#-fsanitize=address

BUILD_DIR = build
CORE_AMSTRAD = ../external/caprice32-go

C_SOURCES =  \
odroid_input.c \
odroid_netplay.c \
odroid_overlay.c \
odroid_sdcard.c \
odroid_system.c \
odroid_display.c \
odroid_audio.c \
gw_lcd.c \
crc32.c \
porting.c \
amstrad/main.c \
$(CORE_AMSTRAD)/cap32/cap32.c \
$(CORE_AMSTRAD)/cap32/crtc.c \
$(CORE_AMSTRAD)/cap32/fdc.c \
$(CORE_AMSTRAD)/cap32/kbdauto.c \
$(CORE_AMSTRAD)/cap32/psg.c \
$(CORE_AMSTRAD)/cap32/slots.c \
$(CORE_AMSTRAD)/cap32/cap32_z80.c \
../Core/Src/porting/amstrad/amstrad_video8bpp.c \
../Core/Src/porting/amstrad/amstrad_loader.c \
../Core/Src/porting/amstrad/amstrad_format.c \
../Core/Src/porting/amstrad/amstrad_catalog.c

CXX_SOURCES  = 

PREFIX = 

CXX = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size

HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

C_DEFS =  \
-DLINUX_EMU \
-DIS_LITTLE_ENDIAN \
-D__LIBRETRO__ \
-DTARGET_GNW \
-DGNW_DISABLE_COMPRESSION \
-DSD_CARD=1

C_INCLUDES =  \
-I. \
-I./amstrad \
-I../retro-go-stm32/components/odroid/ \
-I../Core/Inc/porting/amstrad \
-I../Core/Inc/retro-go \
-I../Core/Src/porting/lib \
-I../Core/Src/porting/lib/lzma \
-I$(CORE_AMSTRAD)/cap32 \
-I/opt/homebrew/include/ \
-I../Core/Inc/porting/amstrad \

fpic := -fPIC
SHARED := -shared -Wl,-version-script=link.T -Wl,-no-undefined

ASFLAGS = $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS = $(C_DEFS) $(C_INCLUDES) `sdl2-config --cflags` $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
CXXFLAGS = $(CFLAGS)
CXXFLAGS += -O2 -fno-exceptions -fno-rtti -DHAVE_STDINT_H -DNDEBUG -fno-threadsafe-statics -std=c++11
CXXFLAGS += -w
CXXFLAGS += $(fpic) $(DEFINES)

#LIBS = -lm `sdl2-config --libs` -lasan
LIBS = -lstdc++ -lm `sdl2-config --libs`
LDFLAGS = $(LIBS)

all: outDir $(BUILD_DIR)/$(TARGET).elf

OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

outDir:
	mkdir -p build
	if ! [ -f ./build/config.h ]; then \
		touch build/config.h; \
	fi

# CXX
CXX_OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(CXX_SOURCES:.cpp=.o) ))
vpath %.cpp $(sort $(dir $(CXX_SOURCES)))

#$(BUILD_DIR)/%.o: %.cpp Makefile.amstrad | $(BUILD_DIR)
$(BUILD_DIR)/%.o: %.cpp | $(BUILD_DIR)
	$(CXX) -c $(CXXFLAGS) $< -o $@

#$(BUILD_DIR)/%.o: %.c Makefile.amstrad | $(BUILD_DIR) 
$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) $(CXX_OBJECTS) Makefile.amstrad
	$(CC) $(OBJECTS) $(CXX_OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR):
	mkdir $@

clean:
	-rm -fR $(BUILD_DIR)

-include $(wildcard $(BUILD_DIR)/*.d)
